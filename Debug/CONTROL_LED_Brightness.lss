
CONTROL_LED_Brightness.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000037a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000003a9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  000003d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000221f  00000000  00000000  0000052b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000959  00000000  00000000  0000274a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b61  00000000  00000000  000030a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00003c04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cc  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000098f  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00004b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002f4  000002f4  00000368  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.APP_Init 0000001e  0000027e  0000027e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Set_Duty 00000012  000002ca  000002ca  0000033e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Main_Task 00000018  0000029c  0000029c  00000310  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.APP_main 00000004  000002f8  000002f8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.BLUE_LED_Initializ 0000000e  000002dc  000002dc  00000350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000000a  000002ea  000002ea  0000035e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.DIO_SetPin_Direction 000000fe  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.Set_Global_INT 0000002c  000001da  000001da  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.timer0_overflow_init_interrupt 00000028  00000206  00000206  0000027a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.timer_CTC_init_interrupt 0000003c  0000016a  0000016a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.timer_wave_fastPWM 00000034  000001a6  000001a6  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.libgcc.div 00000028  0000022e  0000022e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.libgcc.div 00000028  00000256  00000256  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_fini 00000002  00000300  00000300  00000374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  00000302  00000302  00000376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  00000304  00000304  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    00000016  000002b4  000002b4  00000328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  000002fc  000002fc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
   8:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
   c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  10:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  14:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  18:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  1c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  20:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  24:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  28:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  2c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  30:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  34:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  38:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  3c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  40:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  44:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  48:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  4c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  50:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  64:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000002f4 <__bad_interrupt>:
 2f4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.APP_Init:

0000027e <APP_Init>:
#include "BLUE_LED_Private.h"


State_Error APP_Init(void){
	State_Error Local_Error=State_SUCCESS;
	DIO_SetPin_Direction(DIO_PORTA,4,1);
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	64 e0       	ldi	r22, 0x04	; 4
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
	BLUE_LED_Initializ();
 288:	0e 94 6e 01 	call	0x2dc	; 0x2dc <BLUE_LED_Initializ>
	timer0_overflow_init_interrupt();
 28c:	0e 94 03 01 	call	0x206	; 0x206 <timer0_overflow_init_interrupt>
	timer_CTC_init_interrupt();
 290:	0e 94 b5 00 	call	0x16a	; 0x16a <timer_CTC_init_interrupt>
	timer_wave_fastPWM();
 294:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <timer_wave_fastPWM>
	//Set_Global_INT(ON);
    return Local_Error;
}
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	08 95       	ret

Disassembly of section .text.Set_Duty:

000002ca <Set_Duty>:
}

State_Error Set_Duty(unsigned char duty_Cycle)
{
	State_Error Local_Error=State_SUCCESS;
	OCR0=(duty_Cycle * Total_Time) / DIVISION_FAC;
 2ca:	98 2f       	mov	r25, r24
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	64 e6       	ldi	r22, 0x64	; 100
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	0e 94 17 01 	call	0x22e	; 0x22e <__divmodhi4>
 2d6:	6c bf       	out	0x3c, r22	; 60
    return Local_Error;
}
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	08 95       	ret

Disassembly of section .text.Main_Task:

0000029c <Main_Task>:
State_Error Main_Task(void){
	State_Error Local_Error=State_SUCCESS;
	UINT8_t counter1=0;
	UINT8_t counter=0;
	
	for(counter=100;counter>=0;counter--)
 29c:	c4 e6       	ldi	r28, 0x64	; 100
	{
		Set_Duty(counter);
 29e:	8c 2f       	mov	r24, r28
 2a0:	0e 94 65 01 	call	0x2ca	; 0x2ca <Set_Duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	8f e3       	ldi	r24, 0x3F	; 63
 2a6:	9c e9       	ldi	r25, 0x9C	; 156
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <Main_Task+0xc>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <Main_Task+0x12>
 2ae:	00 00       	nop
State_Error Main_Task(void){
	State_Error Local_Error=State_SUCCESS;
	UINT8_t counter1=0;
	UINT8_t counter=0;
	
	for(counter=100;counter>=0;counter--)
 2b0:	c1 50       	subi	r28, 0x01	; 1
 2b2:	f5 cf       	rjmp	.-22     	; 0x29e <Main_Task+0x2>

Disassembly of section .text.APP_main:

000002f8 <APP_main>:
	//Set_Global_INT(ON);
    return Local_Error;
}
State_Error APP_main(void){
	State_Error Local_Error=State_SUCCESS;
	Main_Task();
 2f8:	0e 94 4e 01 	call	0x29c	; 0x29c <Main_Task>

Disassembly of section .text.BLUE_LED_Initializ:

000002dc <BLUE_LED_Initializ>:
 * input: nothing
 * return: Error State
 */
ERROR_STATE BLUE_LED_Initializ(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Direction(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_OUTPUT);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	65 e0       	ldi	r22, 0x05	; 5
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
	return state_error;
}
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	08 95       	ret

Disassembly of section .text.main:

000002ea <main>:
#include "main.h"


int main() 
{
	APP_Init();
 2ea:	0e 94 3f 01 	call	0x27e	; 0x27e <APP_Init>
	while(1)
	{
		APP_main();
 2ee:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <APP_main>
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <main+0x4>

Disassembly of section .text.DIO_SetPin_Direction:

0000006c <DIO_SetPin_Direction>:
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
	switch (state)
  6c:	44 23       	and	r20, r20
  6e:	19 f0       	breq	.+6      	; 0x76 <DIO_SetPin_Direction+0xa>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	e9 f1       	breq	.+122    	; 0xee <DIO_SetPin_Direction+0x82>
  74:	74 c0       	rjmp	.+232    	; 0x15e <DIO_SetPin_Direction+0xf2>
	{
		case DIO_INPUT:
		switch(port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	99 f0       	breq	.+38     	; 0xa0 <DIO_SetPin_Direction+0x34>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPin_Direction+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	e9 f0       	breq	.+58     	; 0xba <DIO_SetPin_Direction+0x4e>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	41 f1       	breq	.+80     	; 0xd4 <DIO_SetPin_Direction+0x68>
  84:	6e c0       	rjmp	.+220    	; 0x162 <DIO_SetPin_Direction+0xf6>
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPin_Direction+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPin_Direction+0x22>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
 * input: port & pin & direction
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
  9c:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_INPUT:
		switch(port)
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
			break;
  9e:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  a0:	27 b3       	in	r18, 0x17	; 23
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <DIO_SetPin_Direction+0x40>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <DIO_SetPin_Direction+0x3c>
  b0:	80 95       	com	r24
  b2:	82 23       	and	r24, r18
  b4:	87 bb       	out	0x17, r24	; 23
 * input: port & pin & direction
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
  b6:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
			break;
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
			break;
  b8:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  ba:	24 b3       	in	r18, 0x14	; 20
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_SetPin_Direction+0x5a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_SetPin_Direction+0x56>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	84 bb       	out	0x14, r24	; 20
 * input: port & pin & direction
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
  d0:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
			break;
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
			break;
  d2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  d4:	21 b3       	in	r18, 0x11	; 17
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_SetPin_Direction+0x74>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_SetPin_Direction+0x70>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	81 bb       	out	0x11, r24	; 17
 * input: port & pin & direction
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
  ea:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
			break;
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
			break;
  ec:	08 95       	ret
			state_error = FAIL;
			break;
		}
		break;
		case DIO_OUTPUT:
		switch(port)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPin_Direction+0xaa>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPin_Direction+0x92>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPin_Direction+0xc2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPin_Direction+0xda>
  fc:	34 c0       	rjmp	.+104    	; 0x166 <DIO_SetPin_Direction+0xfa>
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPin_Direction+0x9e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPin_Direction+0x9a>
 10e:	82 2b       	or	r24, r18
 110:	8a bb       	out	0x1a, r24	; 26
 * input: port & pin & direction
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 112:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_OUTPUT:
		switch(port)
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
			break;
 114:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPin_Direction+0xb6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPin_Direction+0xb2>
 126:	82 2b       	or	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
 * input: port & pin & direction
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 12a:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
			break;
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
			break;
 12c:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPin_Direction+0xce>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPin_Direction+0xca>
 13e:	82 2b       	or	r24, r18
 140:	84 bb       	out	0x14, r24	; 20
 * input: port & pin & direction
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 142:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
			break;
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
			break;
 144:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPin_Direction+0xe6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPin_Direction+0xe2>
 156:	82 2b       	or	r24, r18
 158:	81 bb       	out	0x11, r24	; 17
 * input: port & pin & direction
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 15a:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
			break;
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
			break;
 15c:	08 95       	ret
 * input: port & pin & direction
 * return: Error State
 */
ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	08 95       	ret
			break;
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
			break;
			default:
			state_error = FAIL;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
			break;
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
			break;
			default:
			state_error = FAIL;
 166:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		break;
	}
	return state_error;
}
 168:	08 95       	ret

Disassembly of section .text.Set_Global_INT:

000001da <Set_Global_INT>:
 * input: mode
 * return: Error State
 */
ERROR_STATE Set_Global_INT(GLB_MODE mode){
	ERROR_STATE state_error = SUCCESS;
	SREG |= mode;
 1da:	9f b7       	in	r25, 0x3f	; 63
 1dc:	98 2b       	or	r25, r24
 1de:	9f bf       	out	0x3f, r25	; 63
	if(mode == ON){
 1e0:	80 38       	cpi	r24, 0x80	; 128
 1e2:	29 f4       	brne	.+10     	; 0x1ee <Set_Global_INT+0x14>
		if(!GET_BIT(SREG,7)){
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	07 fc       	sbrc	r0, 7
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <Set_Global_INT+0x20>
			state_error = FAIL;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
		}else{
			state_error = SUCCESS;
		}
	}else{
		if(mode == OFF){
 1ee:	81 11       	cpse	r24, r1
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <Set_Global_INT+0x24>
			if(GET_BIT(SREG,7)){
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	07 fe       	sbrs	r0, 7
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <Set_Global_INT+0x28>
 1f8:	08 95       	ret
	SREG |= mode;
	if(mode == ON){
		if(!GET_BIT(SREG,7)){
			state_error = FAIL;
		}else{
			state_error = SUCCESS;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	08 95       	ret
				state_error = FAIL;
			}else{
				state_error = SUCCESS;
			}
		}else{
			state_error = FAIL;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
	}else{
		if(mode == OFF){
			if(GET_BIT(SREG,7)){
				state_error = FAIL;
			}else{
				state_error = SUCCESS;
 202:	81 e0       	ldi	r24, 0x01	; 1
		}else{
			state_error = FAIL;
		}
	}
	return state_error;
}
 204:	08 95       	ret

Disassembly of section .text.timer0_overflow_init_interrupt:

00000206 <timer0_overflow_init_interrupt>:


void timer0_overflow_init_interrupt(void)
{
	/* select Over mode*/
	CLR_BIT(TCCR0,WGM00);
 206:	83 b7       	in	r24, 0x33	; 51
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM01);
 20c:	83 b7       	in	r24, 0x33	; 51
 20e:	87 7f       	andi	r24, 0xF7	; 247
 210:	83 bf       	out	0x33, r24	; 51
	/*load a value in TCNT0 */
	TCNT0=0;
 212:	12 be       	out	0x32, r1	; 50
	/* select timer clock prescaller 256  */
	CLR_BIT(TCCR0,CS00);
 214:	83 b7       	in	r24, 0x33	; 51
 216:	8e 7f       	andi	r24, 0xFE	; 254
 218:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 21a:	83 b7       	in	r24, 0x33	; 51
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
 220:	83 b7       	in	r24, 0x33	; 51
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	Set_Global_INT(ON);
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	0e 94 ed 00 	call	0x1da	; 0x1da <Set_Global_INT>
 22c:	08 95       	ret

Disassembly of section .text.timer_CTC_init_interrupt:

0000016a <timer_CTC_init_interrupt>:
 * return: Error State
 */
void timer0_deinit(){
	
	TCCR0=0;
	Set_Global_INT(OFF);
 16a:	87 b3       	in	r24, 0x17	; 23
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	87 bb       	out	0x17, r24	; 23
 170:	83 b7       	in	r24, 0x33	; 51
 172:	88 60       	ori	r24, 0x08	; 8
 174:	83 bf       	out	0x33, r24	; 51
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	8c bf       	out	0x3c, r24	; 60
 17a:	83 b7       	in	r24, 0x33	; 51
 17c:	80 61       	ori	r24, 0x10	; 16
 17e:	83 bf       	out	0x33, r24	; 51
 180:	83 b7       	in	r24, 0x33	; 51
 182:	8f 7d       	andi	r24, 0xDF	; 223
 184:	83 bf       	out	0x33, r24	; 51
 186:	83 b7       	in	r24, 0x33	; 51
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	83 bf       	out	0x33, r24	; 51
 18c:	83 b7       	in	r24, 0x33	; 51
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	83 bf       	out	0x33, r24	; 51
 192:	83 b7       	in	r24, 0x33	; 51
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	83 bf       	out	0x33, r24	; 51
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	0e 94 ed 00 	call	0x1da	; 0x1da <Set_Global_INT>
 19e:	89 b7       	in	r24, 0x39	; 57
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	89 bf       	out	0x39, r24	; 57
 1a4:	08 95       	ret

Disassembly of section .text.timer_wave_fastPWM:

000001a6 <timer_wave_fastPWM>:
 1a6:	83 b7       	in	r24, 0x33	; 51
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	83 bf       	out	0x33, r24	; 51
 1ac:	83 b7       	in	r24, 0x33	; 51
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	83 bf       	out	0x33, r24	; 51
 1b2:	83 b7       	in	r24, 0x33	; 51
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	83 bf       	out	0x33, r24	; 51
 1b8:	83 b7       	in	r24, 0x33	; 51
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	83 bf       	out	0x33, r24	; 51
 1be:	83 b7       	in	r24, 0x33	; 51
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	83 bf       	out	0x33, r24	; 51
 1c4:	87 b3       	in	r24, 0x17	; 23
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	87 bb       	out	0x17, r24	; 23
 1ca:	83 b7       	in	r24, 0x33	; 51
 1cc:	8f 7e       	andi	r24, 0xEF	; 239
 1ce:	83 bf       	out	0x33, r24	; 51
 1d0:	83 b7       	in	r24, 0x33	; 51
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	83 bf       	out	0x33, r24	; 51
 1d6:	1c be       	out	0x3c, r1	; 60
 1d8:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000022e <__divmodhi4>:
 22e:	97 fb       	bst	r25, 7
 230:	07 2e       	mov	r0, r23
 232:	16 f4       	brtc	.+4      	; 0x238 <__divmodhi4+0xa>
 234:	00 94       	com	r0
 236:	07 d0       	rcall	.+14     	; 0x246 <__divmodhi4_neg1>
 238:	77 fd       	sbrc	r23, 7
 23a:	09 d0       	rcall	.+18     	; 0x24e <__divmodhi4_neg2>
 23c:	0e 94 2b 01 	call	0x256	; 0x256 <__udivmodhi4>
 240:	07 fc       	sbrc	r0, 7
 242:	05 d0       	rcall	.+10     	; 0x24e <__divmodhi4_neg2>
 244:	3e f4       	brtc	.+14     	; 0x254 <__divmodhi4_exit>

00000246 <__divmodhi4_neg1>:
 246:	90 95       	com	r25
 248:	81 95       	neg	r24
 24a:	9f 4f       	sbci	r25, 0xFF	; 255
 24c:	08 95       	ret

0000024e <__divmodhi4_neg2>:
 24e:	70 95       	com	r23
 250:	61 95       	neg	r22
 252:	7f 4f       	sbci	r23, 0xFF	; 255

00000254 <__divmodhi4_exit>:
 254:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000256 <__udivmodhi4>:
 256:	aa 1b       	sub	r26, r26
 258:	bb 1b       	sub	r27, r27
 25a:	51 e1       	ldi	r21, 0x11	; 17
 25c:	07 c0       	rjmp	.+14     	; 0x26c <__udivmodhi4_ep>

0000025e <__udivmodhi4_loop>:
 25e:	aa 1f       	adc	r26, r26
 260:	bb 1f       	adc	r27, r27
 262:	a6 17       	cp	r26, r22
 264:	b7 07       	cpc	r27, r23
 266:	10 f0       	brcs	.+4      	; 0x26c <__udivmodhi4_ep>
 268:	a6 1b       	sub	r26, r22
 26a:	b7 0b       	sbc	r27, r23

0000026c <__udivmodhi4_ep>:
 26c:	88 1f       	adc	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	5a 95       	dec	r21
 272:	a9 f7       	brne	.-22     	; 0x25e <__udivmodhi4_loop>
 274:	80 95       	com	r24
 276:	90 95       	com	r25
 278:	bc 01       	movw	r22, r24
 27a:	cd 01       	movw	r24, r26
 27c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000300 <_fini>:
 300:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000302 <__funcs_on_exit>:
 302:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000304 <__simulator_exit>:
 304:	08 95       	ret

Disassembly of section .text.exit:

000002b4 <exit>:
 2b4:	ec 01       	movw	r28, r24
 2b6:	0e 94 81 01 	call	0x302	; 0x302 <__funcs_on_exit>
 2ba:	0e 94 80 01 	call	0x300	; 0x300 <_fini>
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 82 01 	call	0x304	; 0x304 <__simulator_exit>
 2c4:	ce 01       	movw	r24, r28
 2c6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Exit>

Disassembly of section .text._Exit:

000002fc <_Exit>:
 2fc:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
